# Workflow name that appears in GitHub Actions UI
name: Deploy to EC2

# Define when this workflow will run
on:
  push:
    branches: [main] # Trigger on push to main branch
  pull_request:
    branches: [main] # Trigger on PRs to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest # Use Ubuntu as the runner OS
    if: github.ref == 'refs/heads/main' # Only deploy if we're on main branch
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v2

      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.0" # Use specific Node.js version for consistency

      # Step 3: Cache npm dependencies with retry logic
      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: npm-cache
        continue-on-error: true # Don't fail the workflow if cache fails
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Step 4: Retry cache on failure
      - name: Retry Cache on Failure
        uses: actions/cache@v3
        if: steps.npm-cache.outcome == 'failure'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Step 5: Install dependencies (will use cache if available)
      - name: Install Dependencies
        run: npm ci --production

      # Step 6: Deploy to EC2 using SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 instance IP/hostname
          username: ${{ secrets.EC2_USERNAME }} # EC2 user (usually 'ubuntu')
          key: ${{ secrets.EC2_PRIVATE_KEY }} # SSH private key
          script: |
            cd ~/mathongo-backend  # Navigate to project directory
            git pull origin main   # Pull latest code
            npm ci --production    # Install dependencies in CI mode
            pm2 restart all       # Restart the Node.js application
